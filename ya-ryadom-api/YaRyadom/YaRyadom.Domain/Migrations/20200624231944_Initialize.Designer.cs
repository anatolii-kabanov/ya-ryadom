// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using YaRyadom.Domain.DbContexts;

namespace YaRyadom.Domain.Migrations
{
    [DbContext(typeof(YaRyadomDbContext))]
    [Migration("20200624231944_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("YaRyadom.Domain.Entities.YaRyadomEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("character varying(1023)")
                        .HasMaxLength(1023);

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnName("location")
                        .HasColumnType("geography (point)");

                    b.Property<int>("MaxQuantity")
                        .HasColumnName("max_quantity")
                        .HasColumnType("integer");

                    b.Property<bool>("Revoked")
                        .HasColumnName("revoked")
                        .HasColumnType("boolean");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .HasColumnType("tsvector");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("YaVDeleUserOwnerId")
                        .HasColumnName("ya_ryadom_user_owner_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasAnnotation("Npgsql:IndexMethod", "GIN");

                    b.HasIndex("YaVDeleUserOwnerId");

                    b.ToTable("ya_ryadom_events");
                });

            modelBuilder.Entity("YaRyadom.Domain.Entities.YaRyadomUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AboutMySelf")
                        .HasColumnName("about_my_self")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("text");

                    b.Property<bool>("GuideCompleted")
                        .HasColumnName("guide_completed")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("text");

                    b.Property<long>("VkId")
                        .HasColumnName("vk_id")
                        .HasColumnType("bigint");

                    b.Property<string>("VkUserAvatarUrl")
                        .HasColumnName("vk_user_avatar_url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("VkId")
                        .IsUnique();

                    b.ToTable("ya_ryadom_users");
                });

            modelBuilder.Entity("YaRyadom.Domain.Entities.YaRyadomUserTheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Type")
                        .HasColumnName("type")
                        .HasColumnType("integer");

                    b.Property<int>("YaRyadomUserId")
                        .HasColumnName("ya_ryadom_user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("YaRyadomUserId");

                    b.ToTable("ya_ryadom_user_themes");
                });

            modelBuilder.Entity("YaRyadom.Domain.Entities.YaRyadomEvent", b =>
                {
                    b.HasOne("YaRyadom.Domain.Entities.YaRyadomUser", "YaVDeleUserOwner")
                        .WithMany("OwnYaVDeleEvents")
                        .HasForeignKey("YaVDeleUserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YaRyadom.Domain.Entities.YaRyadomUserTheme", b =>
                {
                    b.HasOne("YaRyadom.Domain.Entities.YaRyadomUser", "YaRyadomUser")
                        .WithMany("YaRyadomUserThemes")
                        .HasForeignKey("YaRyadomUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
